20200323，阿里算法工程师实习笔试题
题目大概：
输入一个n行m列矩阵，‘S’表示起点，‘E’表示终点，‘#’表示障碍，‘.’表示可走，
只能横着走或竖着走，使用飞行器可以跳走，但是两点要满足x1+x2=n+1,y1+y2=m+1,
最多使用5次飞行器，问最快到达终点需要几步，不能到达返回-1.
例图：
#S..
E#..
#...
....
输出为4，(1,1)->(4,3)->(4,4)->(3,4)->(2,1)

代码：
#include<iostream>
#include<cstring>
#include<queue>
using namespace std;
const int maxn=4005;
char s[maxn][maxn];
bool vis[maxn][maxn][6];
/*需要多开一维记录到达同一点时不同的飞行次数使用状态，
因为不同走法可能到达同一点，为了避免不影响后面路径经过该点*/

int n,m;
int dx[4]={0,0,1,-1};
int dy[4]={1,-1,0,0};
struct node{

	int x,y,k;
	int step;
	node(){}
	node(int x,int y,int k,int step):x(x),y(y),k(k),step(step){}
};
node S,E;
int bfs()
{
	queue<node>	q;
	while(!q.empty())
		q.pop();
	memset(vis,0,sizeof(vis));
	q.push(S);
	vis[S.x][S.y][5-S.k]=1;
	while(!q.empty()){
		node cur = q.front();
		q.pop();
		for(int i=0;i<5;i++){
			node nxt;
			if(i!=4){
				nxt.x=cur.x+dx[i];
				nxt.y=cur.y+dy[i];
				nxt.k=cur.k;
				nxt.step=cur.step+1;
			}
			else {
				if(cur.k==0)
					continue;
				nxt.x=n+1-cur.x;
				nxt.y=m+1-cur.y;
				nxt.k=cur.k-1;
				nxt.step=cur.step+1;
			}
			if(nxt.x==E.x&&nxt.y==E.y)
				return nxt.step;
			if(nxt.x<=0||nxt.x>n||nxt.y<=0||nxt.y>m)
				continue;
			if(vis[nxt.x][nxt.y][5-nxt.k]==1)
				continue;
			if(s[nxt.x][nxt.y]=='#')
				continue;
			vis[nxt.x][nxt.y][5-nxt.k]=1;
			q.push(nxt);
		}
	}
	return -1;
}
int main()
{
	cin>>n>>m;
	for(int i=1;i<=n;i++)
		for(int j=1;j<=m;j++){
			cin>>s[i][j];
			if(s[i][j]=='E')
				E=node(i,j,0,0);
			if(s[i][j]=='S')
				S=node(i,j,5,0);
		}
	cout<<bfs()<<endl;
	return 0;
}
